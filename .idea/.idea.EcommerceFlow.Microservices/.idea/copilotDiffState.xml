<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="&#10;#  Estrutura do Projeto: EcommerceFlow.Microservices&#10;&#10;Este projeto segue uma arquitetura de **microserviços com .NET**, com separação por domínio (Estoque, Vendas) e por camadas (Presentation, Domain, Infrastructure, etc).&#10;&#10;##  Estrutura Geral&#10;&#10;```plaintext&#10;EcommerceFlow.Microservices.sln&#10;└── src/&#10;    ├── InventoryService/&#10;    │   ├── 1-Presentation/&#10;    │   │   └── EcommerceFlow.InventoryService.API/&#10;    │&#10;    ├── SalesService/&#10;    │   ├── 1-Presentation/&#10;    │   │   └── EcommerceFlow.SalesService.API/&#10;    │&#10;    ├── ApiGateway/&#10;    │   └── EcommerceFlow.ApiGateway/&#10;    │&#10;    └── BuildingBlocks/&#10;        └── EcommerceFlow.BuildingBlocks/&#10;```&#10;&#10;### ✅ Descrição dos Componentes&#10;&#10;| Caminho                                      | Responsabilidade |&#10;|---------------------------------------------|------------------|&#10;| `InventoryService/1-Presentation/API`       | API do microserviço de Estoque |&#10;| `SalesService/1-Presentation/API`           | API do microserviço de Vendas |&#10;| `ApiGateway/`                               | Roteador principal das requisições |&#10;| `BuildingBlocks/`                           | Bibliotecas reutilizáveis (ex: JWT, Messaging) |&#10;&#10;##  Tecnologias Utilizadas&#10;&#10;- .NET 9&#10;- ASP.NET Core&#10;- Entity Framework Core&#10;- RabbitMQ&#10;- JWT Authentication&#10;- Docker&#10;&#10;##  Como rodar&#10;&#10;Em breve: docker-compose e instruções de execução.&#10;" />
              <option name="updatedContent" value="#  Estrutura do Projeto: EcommerceFlow.Microservices&#10;&#10;Este projeto segue uma arquitetura de **microserviços com .NET**, com separação por domínio (Estoque, Vendas) e por camadas (Presentation, Domain, Infrastructure, etc).&#10;&#10;##  Estrutura Geral&#10;&#10;```plaintext&#10;EcommerceFlow.Microservices.sln&#10;└── src/&#10;    ├── InventoryService/&#10;    │   ├── 1-Presentation/&#10;    │   │   └── EcommerceFlow.InventoryService.API/&#10;    │   ├── 2-Domain/&#10;    │   │   ├── EcommerceFlow.InventoryService.Domain.Application/&#10;    │   │   └── EcommerceFlow.InventoryService.Domain.Core/&#10;    │   ├── 3-Infrastructure/&#10;    │   │   ├── EcommerceFlow.InventoryService.Infrastructure.Data/&#10;    │   │   └── EcommerceFlow.InventoryService.Infrastructure.Services/&#10;    │   ├── 4-CrossCutting/&#10;    │   │   └── EcommerceFlow.InventoryService.CrossCutting.Exceptions/&#10;    │   └── 5-Test/&#10;    │       └── EcommerceFlow.InventoryService.Tests/&#10;    │&#10;    ├── SalesService/&#10;    │   ├── 1-Presentation/&#10;    │   │   └── EcommerceFlow.SalesService.API/&#10;    │   ├── 2-Domain/&#10;    │   │   ├── EcommerceFlow.SalesService.Application/&#10;    │   │   └── EcommerceFlow.SalesService.Domain/&#10;    │   ├── 3-Infrastructure/&#10;    │   │   ├── EcommerceFlow.SalesService.Infrastructure.Data/&#10;    │   │   └── EcommerceFlow.SalesService.Infrastructure.Services/&#10;    │   ├── 4-CrossCutting/&#10;    │   │   └── EcommerceFlow.SalesService.CrossCutting.Exceptions/&#10;    │   └── 5-Test/&#10;    │       └── EcommerceFlow.SalesService.Tests/&#10;    │&#10;    ├── ApiGateway/&#10;    │   └── EcommerceFlow.ApiGateway/&#10;    │&#10;    └── BuildingBlocks/&#10;        ├── EcommerceFlow.BuildingBlocks/&#10;        ├── EcommerceFlow.BuildingBlocks.Authentication/&#10;        └── EcommerceFlow.BuildingBlocks.Messaging/&#10;```&#10;&#10;### ✅ Descrição dos Componentes&#10;&#10;| Caminho                                                    | Responsabilidade |&#10;|-----------------------------------------------------------|------------------|&#10;| `InventoryService/1-Presentation/API`                     | API do microserviço de Estoque |&#10;| `InventoryService/2-Domain/Domain.Application`            | Camada de aplicação do Estoque |&#10;| `InventoryService/2-Domain/Domain.Core`                   | Domínio central do Estoque |&#10;| `InventoryService/3-Infrastructure/Infrastructure.Data`   | Infraestrutura de dados do Estoque |&#10;| `InventoryService/3-Infrastructure/Infrastructure.Services`| Serviços externos do Estoque |&#10;| `InventoryService/4-CrossCutting/CrossCutting.Exceptions` | Tratamento de exceções do Estoque |&#10;| `InventoryService/5-Test/Tests`                           | Testes automatizados do Estoque |&#10;| `SalesService/1-Presentation/API`                         | API do microserviço de Vendas |&#10;| `SalesService/2-Domain/Application`                       | Camada de aplicação de Vendas |&#10;| `SalesService/2-Domain/Domain`                            | Domínio central de Vendas |&#10;| `SalesService/3-Infrastructure/Infrastructure.Data`       | Infraestrutura de dados de Vendas |&#10;| `SalesService/3-Infrastructure/Infrastructure.Services`   | Serviços externos de Vendas |&#10;| `SalesService/4-CrossCutting/CrossCutting.Exceptions`     | Tratamento de exceções de Vendas |&#10;| `SalesService/5-Test/Tests`                               | Testes automatizados de Vendas |&#10;| `ApiGateway/`                                             | Roteador principal das requisições |&#10;| `BuildingBlocks/`                                         | Bibliotecas reutilizáveis (ex: JWT, Messaging) |&#10;| `BuildingBlocks/Authentication`                           | Autenticação compartilhada |&#10;| `BuildingBlocks/Messaging`                                | Mensageria compartilhada |&#10;&#10;### ️ Funcionalidades e melhorias implementadas&#10;&#10;- Estrutura de pastas e projetos padronizada para InventoryService e SalesService, seguindo o mesmo padrão de camadas.&#10;- Todos os projetos configurados para .NET 9.&#10;- Swagger configurado e funcional nas APIs (InventoryService.API, SalesService.API e ApiGateway).&#10;- Projeto ApiGateway simplificado, mas já preparado para documentação via Swagger.&#10;- Projetos de teste com xUnit e coverlet configurados.&#10;- BuildingBlocks preparado para bibliotecas compartilhadas (ex: autenticação, mensageria).&#10;- Solution (.sln) organizada refletindo a estrutura de pastas dos microserviços.&#10;&#10;##  Tecnologias Utilizadas&#10;&#10;- .NET 9&#10;- ASP.NET Core&#10;- Entity Framework Core&#10;- RabbitMQ&#10;- JWT Authentication&#10;- Docker&#10;&#10;##  Como rodar&#10;&#10;Em breve: docker-compose e instruções de execução." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>